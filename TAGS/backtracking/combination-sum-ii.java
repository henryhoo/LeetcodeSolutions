/*
 Given a collection of candidate numbers ( C ) and a target number ( T ), find
all unique combinations in C where the candidate numbers sums to T .  Each
number in C may only be used once in the combination.  Note:   All numbers
(including target) will be positive integers.  Elements in a combination ( a 1 ,
a 2 , … , a k ) must be in non-descending order. (ie, a 1 ≤ a 2 ≤ … ≤ a k ).
The solution set must not contain duplicate combinations.    For example, given
candidate set 10,1,2,7,6,1,5 and target 8 , A solution set is:  [1, 7]   [1, 2,
5]   [2, 6]   [1, 1, 6]     Subscribe to see which companies asked this question
Show Tags   Array  Backtracking     Show Similar Problems   (M) Combination Sum
*/

//solution simliar to part 1
public List<List<Integer>> combinationSum2(int[] candidates, int target) {   List<List<Integer>> list = new LinkedList<List<Integer>>();   Arrays.sort(candidates);   backtrack(list, new ArrayList<Integer>(), candidates, target, 0);   return list;}private void backtrack(List<List<Integer>> list, List<Integer> tempList, int[] cand, int remain, int start) {   if(remain < 0) return; /** no solution */   else if(remain == 0) list.add(new ArrayList<>(tempList));   else{      for (int i = start; i < cand.length; i++) {         if(i > start && cand[i] == cand[i-1]) continue; /** skip duplicates */         tempList.add(cand[i]);         backtrack(list, tempList, cand, remain - cand[i], i+1);         tempList.remove(tempList.size() - 1);      }   }}//solution by detecting node fistpublic List<List<Integer>> combinationSum2(int[] candidates, int target) {    List<List<Integer>> ans = new ArrayList<>();    List<Integer> comb = new ArrayList<>();    Arrays.sort(candidates); // need sort to make this work.    combination(candidates, target, 0, comb, ans);    return ans;}private void combination(int[] candi, int target, int start,        List<Integer> comb, List<List<Integer>> ans) {    for (int i = start; i < candi.length; i++) {        if (i > start && candi[i] == candi[i - 1]) //remove duplicates.            continue;        if (candi[i] == target) {            //recursion exit.            List<Integer> newComb = new ArrayList<>(comb);//note: should use allocate new memory for it            newComb.add(candi[i]);            ans.add(newComb);        } else if (candi[i] < target) {            //continue to look for the rest.            List<Integer> newComb = new ArrayList<>(comb);            newComb.add(candi[i]);            combination(candi, target - candi[i], i + 1, newComb, ans);        } else            break; //invalid path, return nothing.    }}//improve pervious solutionpublic class Solution {public List<List<Integer>> combinationSum2(int[] candidates, int target) {    List<List<Integer>> ans = new ArrayList<>();    List<Integer> comb = new ArrayList<>();    Arrays.sort(candidates); // need sort to make this work.    combination(candidates, target, 0, comb, ans);    return ans;}private void combination(int[] candi, int target, int start,        List<Integer> comb, List<List<Integer>> ans) {    for (int i = start; i < candi.length; i++) {        if (i > start && candi[i] == candi[i - 1]) //remove duplicates.            continue;        if (candi[i] == target) {            //recursion exit.            comb.add(candi[i]);//note: use remove instead            ans.add(new ArrayList<>(comb));            comb.remove(comb.size()-1);        } else if (candi[i] < target) {            //continue to look for the rest.            comb.add(candi[i]);            combination(candi, target - candi[i], i + 1, comb, ans);            comb.remove(comb.size()-1);        } else            break; //invalid path, return nothing.    }}}