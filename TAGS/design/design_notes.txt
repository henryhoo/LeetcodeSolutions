******************************implement-trie-prefix-tree
 Implement a trie with insert , search , and startsWith methods.   Note: You may
assume that all inputs are consist of lowercase letters a-z .   Subscribe to see
which companies asked this question    Show Tags   Design  Trie     Show Similar
Problems   (M) Add and Search Word - Data structure design

******************************serialize-and-deserialize-binary-tree
 Serialization is the process of converting a data structure or object into a
sequence of bits so that it can be stored in a file or memory buffer, or
transmitted across a network connection link to be reconstructed later in the
same or another computer environment.  Design an algorithm to serialize and
deserialize a binary tree. There is no restriction on how your
serialization/deserialization algorithm should work. You just need to ensure
that a binary tree can be serialized to a string and this string can be
deserialized to the original tree structure.  For example, you may serialize the
following tree 1
/ \
2   3
/ \
4   5 as "[1,2,3,null,null,4,5]" , just the same as how LeetCode OJ serializes a
binary tree . You do not necessarily need to follow this format, so please be
creative and come up with different approaches yourself.   Note: Do not use
class member/global/static variables to store states. Your serialize and
deserialize algorithms should be stateless.  Credits: Special thanks to
@Louis1992 for adding this problem and creating all test cases.   Subscribe to
see which companies asked this question    Show Tags   Tree  Design     Show
Similar Problems   (M) Encode and Decode Strings

******************************implement-queue-using-stacks
 Implement the following operations of a queue using stacks.  push(x) -- Push
element x to the back of queue.  pop() -- Removes the element from in front of
queue.  peek() -- Get the front element.  empty() -- Return whether the queue is
empty.   Notes:   You must use only standard operations of a stack -- which
means only push to top , peek/pop from top , size , and is empty operations are
valid.  Depending on your language, stack may not be supported natively. You may
simulate a stack by using a list or deque (double-ended queue), as long as you
use only standard operations of a stack.  You may assume that all operations are
valid (for example, no pop or peek operations will be called on an empty queue).
Subscribe to see which companies asked this question    Show Tags   Stack
Design     Show Similar Problems   (E) Implement Stack using Queues

******************************find-median-from-data-stream
 Median is the middle value in an ordered integer list. If the size of the list
is even, there is no middle value. So the median is the mean of the two middle
value. Examples:  [2,3,4] , the median is 3  [2,3] , the median is (2 + 3) / 2 =
2.5   Design a data structure that supports the following two operations:   void
addNum(int num) - Add a integer number from the data stream to the data
structure.  double findMedian() - Return the median of all elements so far.
For example:  add(1)
add(2)
findMedian() -> 1.5
add(3)
findMedian() -> 2  Credits: Special thanks to @Louis1992 for adding this problem
and creating all test cases.   Subscribe to see which companies asked this
question    Show Tags   Heap  Design

******************************flatten-nested-list-iterator
 Given a nested list of integers, implement an iterator to flatten it.  Each
element is either an integer, or a list -- whose elements may also be integers
or other lists.  Example 1: Given the list [[1,1],2,[1,1]] , By calling next
repeatedly until hasNext returns false, the order of elements returned by next
should be: [1,1,2,1,1] .   Example 2: Given the list [1,[4,[6]]] , By calling
next repeatedly until hasNext returns false, the order of elements returned by
next should be: [1,4,6] .    Subscribe to see which companies asked this
question    Show Tags   Stack  Design     Show Similar Problems   (M) Flatten 2D
Vector  (M) Zigzag Iterator

******************************peeking-iterator
 Given an Iterator class interface with methods: next() and hasNext() , design
and implement a PeekingIterator that support the peek() operation -- it
essentially peek() at the element that will be returned by the next call to
next().   Here is an example. Assume that the iterator is initialized to the
beginning of the list: [1, 2, 3] .  Call next() gets you 1, the first element in
the list.  Now you call peek() and it returns 2, the next element. Calling
next() after that still return 2.  You call next() the final time and it returns
3, the last element. Calling hasNext() after that should return false.   Think
of "looking ahead". You want to cache the next element.  Is one variable
sufficient? Why or why not?  Test your design with call order of peek() before
next() vs next() before peek() .  For a clean implementation, check out Google's
guava library source code .   Follow up : How would you extend your design to be
generic and work with all types, not just integer?  Credits: Special thanks to
@porker2008 for adding this problem and creating all test cases.   Subscribe to
see which companies asked this question    Show Tags   Design     Show Similar
Problems   (M) Binary Search Tree Iterator  (M) Flatten 2D Vector  (M) Zigzag
Iterator

******************************min-stack
 Design a stack that supports push, pop, top, and retrieving the minimum element
in constant time.  push(x) -- Push element x onto stack.  pop() -- Removes the
element on top of the stack.  top() -- Get the top element.  getMin() --
Retrieve the minimum element in the stack.    Example:  MinStack minStack = new
MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.    Subscribe to see which companies asked
this question    Show Tags   Stack  Design     Show Similar Problems   (H)
Sliding Window Maximum

******************************implement-stack-using-queues
 Implement the following operations of a stack using queues.  push(x) -- Push
element x onto stack.  pop() -- Removes the element on top of the stack.  top()
-- Get the top element.  empty() -- Return whether the stack is empty.   Notes:
You must use only standard operations of a queue -- which means only push to
back , peek/pop from front , size , and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may
simulate a queue by using a list or deque (double-ended queue), as long as you
use only standard operations of a queue.  You may assume that all operations are
valid (for example, no pop or top operations will be called on an empty stack).
Update (2015-06-11): The class name of the Java function had been updated to
MyStack instead of Stack.  Credits: Special thanks to @jianchao.li.fighter for
adding this problem and all test cases.   Subscribe to see which companies asked
this question    Show Tags   Stack  Design     Show Similar Problems   (E)
Implement Queue using Stacks

******************************add-and-search-word-data-structure-design
 Design a data structure that supports the following two operations:  void
addWord(word)
bool search(word)  search(word) can search a literal word or a regular
expression string containing only letters a-z or . . A . means it can represent
any one letter.  For example:  addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true   Note: You may assume that all words are consist of
lowercase letters a-z .  click to show hint.  You should be familiar with how a
Trie works. If not, please work on this problem: Implement Trie (Prefix Tree)
first.   Subscribe to see which companies asked this question    Show Tags
Backtracking  Trie  Design     Show Similar Problems   (M) Implement Trie
(Prefix Tree)

******************************binary-search-tree-iterator
 Implement an iterator over a binary search tree (BST). Your iterator will be
initialized with the root node of a BST.  Calling next() will return the next
smallest number in the BST.  Note: next() and hasNext() should run in average
O(1) time and uses O( h ) memory, where h is the height of the tree.  Credits:
Special thanks to @ts for adding this problem and creating all test cases.
Subscribe to see which companies asked this question    Show Tags   Tree  Stack
Design     Show Similar Problems   (M) Binary Tree Inorder Traversal  (M)
Flatten 2D Vector  (M) Zigzag Iterator  (M) Peeking Iterator  (M) Inorder
Successor in BST

******************************lru-cache
 Design and implement a data structure for Least Recently Used (LRU) cache. It
should support the following operations: get and set .   get(key) - Get the
value (will always be positive) of the key if the key exists in the cache,
otherwise return -1.  set(key, value) - Set or insert the value if the key is
not already present. When the cache reached its capacity, it should invalidate
the least recently used item before inserting a new item.   Subscribe to see
which companies asked this question    Show Tags   Design

